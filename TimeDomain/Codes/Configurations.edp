func real mu1(real xx, real yy)
{
  // 0 - Homogeneous background
  if(ChoosePlateConfig==0){
    return mu;
  }

  // 1 - Disc inclusion
  if(ChoosePlateConfig==1){
    real DefectRadius = lambdas;
    real DefectValue = 1.3;
    if(xx^2+yy^2<DefectRadius^2){
      return DefectValue;
    }
    else{
      return mu;
    }
  }

    // 2 - four regions
    if(ChoosePlateConfig==2){
      real[int] Listmu = [1,2,3,4];
      if(yy>0){
        return (xx<0) ? Listmu(0):Listmu(1);
      }
      else{
        return (xx<0) ? Listmu(2):Listmu(3);
      }
    }

}

func real lambda1(real xx, real yy)
{
  // 0 - Homogeneous background
  if(ChoosePlateConfig==0){
    return lambda;
  }

  // 1 - Disc inclusion
  if(ChoosePlateConfig==1){
    real DefectRadius = lambdas;
    real DefectValue = 2.5;
    if(xx^2+yy^2<DefectRadius^2){
      return DefectValue;
    }
    else{
      return lambda;
    }
  }

  // 2 - four regions
  if(ChoosePlateConfig==2){
    real[int] Listlambda = [5,6,7,8];
    if(yy>0){
      return (xx<0) ? Listlambda(0):Listlambda(1);
    }
    else{
      return (xx<0) ? Listlambda(2):Listlambda(3);
    }
  }
}



func real rho1(real xx, real yy)
{
  // 0 - Homogeneous background
  if(ChoosePlateConfig==0){
    return rho;
  }

  // 1 - Disc inclusion
  if(ChoosePlateConfig==1){
    real DefectRadius = lambdas;
    real DefectValue = 3.5;
    if(xx^2+yy^2<DefectRadius^2){
      return DefectValue;
    }
    else{
      return rho;
    }
  }

  // 2 - four regions
  if(ChoosePlateConfig==2){
    real[int] Listrho = [2,4,6,8];
    if(yy>0){
      return (xx<0) ? Listrho(0):Listrho(1);
    }
    else{
      return (xx<0) ? Listrho(2):Listrho(3);
    }
  }
}
