// Macro
real sqrt2 = sqrt(2.);
macro epsilon(u1, u2) [dx(u1), dy(u2), (dy(u1)+dx(u2))/sqrt2] // EOM
// Remark: the 1/sqrt2 term in (dy(u1)+dx(u2)) is here
// to obtain a 1/2 when we use epsilon(u1, u2)'*epsilon(v1, v2)
macro div(u, v) (dx(u) + dy(v)) // EOM
macro puw(ux,uy,wx,wy) (-beta*M*div(ux,uy)-M*div(wx,wy)) //
macro Norm(u1,u2) real(sqrt(u1*conj(u1)+u2*conj(u2)))//

func real Dirac(real xx)
{
  return 1/pi*exp(-xx);
}

// Some ellipses to stabilize the meshing of the cracks
func real EllipseX(real CX, real ax, real ay, real theta,real t)
{
  return ax*cos(theta)*cos(t)-ay*sin(theta)*sin(t)+CX;
}
func real EllipseY(real CY, real ax, real ay, real theta,real t)
{
  return ax*sin(theta)*cos(t)+ay*cos(theta)*sin(t)+CY;
}


func int[int] EuclidianDivision(int a, int b) // a = bq+r
{
    //
  int r=a;
  int q=0;
  int[int] output(2);
  while (r>=b)
  {
    r = r-b;
    q = q+1;
  }

  output(0)=q; output(1)=r;

  return output;
}
